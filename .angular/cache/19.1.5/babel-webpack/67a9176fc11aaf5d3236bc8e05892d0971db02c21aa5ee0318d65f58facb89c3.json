{"ast":null,"code":"import _asyncToGenerator from \"/Users/mariadelmarsevillaescobar/Downloads/spectacular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { AdviceComponent } from './advice.component';\nimport { provideRouter } from '@angular/router';\nimport { By } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\ndescribe('AdviceComponent', () => {\n  let component;\n  let fixture;\n  let debugEl;\n  let expectedAdvice = {\n    slip: {\n      id: 2,\n      advice: 'fake advice'\n    }\n  };\n  let routerSpy;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n    yield TestBed.configureTestingModule({\n      providers: [provideRouter([]), {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(AdviceComponent);\n    component = fixture.componentInstance;\n    debugEl = fixture.debugElement;\n    // Use Angular's setInput to set the input value\n    fixture.componentRef.setInput('advice', expectedAdvice);\n    fixture.detectChanges();\n    yield fixture.whenStable();\n  }));\n  it('should display the advice', () => {\n    const adviceElement = debugEl.query(By.css('p')).nativeElement;\n    expect(adviceElement.textContent).toContain(expectedAdvice.slip.advice);\n  });\n  it('should redirect to the hate page', () => {\n    component.hateAdvice();\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/hate', expectedAdvice.slip.id]);\n  });\n});","map":{"version":3,"names":["TestBed","AdviceComponent","provideRouter","By","Router","describe","component","fixture","debugEl","expectedAdvice","slip","id","advice","routerSpy","beforeEach","_asyncToGenerator","jasmine","createSpyObj","configureTestingModule","providers","provide","useValue","compileComponents","createComponent","componentInstance","debugElement","componentRef","setInput","detectChanges","whenStable","it","adviceElement","query","css","nativeElement","expect","textContent","toContain","hateAdvice","navigate","toHaveBeenCalledWith"],"sources":["/Users/mariadelmarsevillaescobar/Downloads/spectacular/src/app/spy-expert/advice/advice.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { Advice } from '../core/models/advice';\nimport { AdviceComponent } from './advice.component';\nimport { DebugElement } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { By } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\n\ndescribe('AdviceComponent', () => {\n  let component: AdviceComponent;\n  let fixture: ComponentFixture<AdviceComponent>;\n  let debugEl: DebugElement;\n  let expectedAdvice: Advice = { slip: { id: 2, advice: 'fake advice' } };\n  let routerSpy: jasmine.SpyObj<Router>;\n\n  beforeEach(async () => {\n    routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n\n    await TestBed.configureTestingModule({\n      providers: [\n        provideRouter([]),\n        { provide: Router, useValue: routerSpy },\n      ],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(AdviceComponent);\n    component = fixture.componentInstance;\n    debugEl = fixture.debugElement;\n\n    // Use Angular's setInput to set the input value\n    fixture.componentRef.setInput('advice', expectedAdvice);\n    fixture.detectChanges();\n\n    await fixture.whenStable();\n  });\n\n  it('should display the advice', () => {\n    const adviceElement = debugEl.query(By.css('p')).nativeElement;\n    expect(adviceElement.textContent).toContain(expectedAdvice.slip.advice);\n  });\n\n  it('should redirect to the hate page', () => {\n    component.hateAdvice();\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/hate', expectedAdvice.slip.id]);\n  });\n});\n"],"mappings":";AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AAEjE,SAASC,eAAe,QAAQ,oBAAoB;AAEpD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,EAAE,QAAQ,2BAA2B;AAC9C,SAASC,MAAM,QAAQ,iBAAiB;AAExCC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,SAA0B;EAC9B,IAAIC,OAA0C;EAC9C,IAAIC,OAAqB;EACzB,IAAIC,cAAc,GAAW;IAAEC,IAAI,EAAE;MAAEC,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAa;EAAE,CAAE;EACvE,IAAIC,SAAiC;EAErCC,UAAU,cAAAC,iBAAA,CAAC,aAAW;IACpBF,SAAS,GAAGG,OAAO,CAACC,YAAY,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,CAAC;IAExD,MAAMjB,OAAO,CAACkB,sBAAsB,CAAC;MACnCC,SAAS,EAAE,CACTjB,aAAa,CAAC,EAAE,CAAC,EACjB;QAAEkB,OAAO,EAAEhB,MAAM;QAAEiB,QAAQ,EAAER;MAAS,CAAE;KAE3C,CAAC,CAACS,iBAAiB,EAAE;IAEtBf,OAAO,GAAGP,OAAO,CAACuB,eAAe,CAACtB,eAAe,CAAC;IAClDK,SAAS,GAAGC,OAAO,CAACiB,iBAAiB;IACrChB,OAAO,GAAGD,OAAO,CAACkB,YAAY;IAE9B;IACAlB,OAAO,CAACmB,YAAY,CAACC,QAAQ,CAAC,QAAQ,EAAElB,cAAc,CAAC;IACvDF,OAAO,CAACqB,aAAa,EAAE;IAEvB,MAAMrB,OAAO,CAACsB,UAAU,EAAE;EAC5B,CAAC,EAAC;EAEFC,EAAE,CAAC,2BAA2B,EAAE,MAAK;IACnC,MAAMC,aAAa,GAAGvB,OAAO,CAACwB,KAAK,CAAC7B,EAAE,CAAC8B,GAAG,CAAC,GAAG,CAAC,CAAC,CAACC,aAAa;IAC9DC,MAAM,CAACJ,aAAa,CAACK,WAAW,CAAC,CAACC,SAAS,CAAC5B,cAAc,CAACC,IAAI,CAACE,MAAM,CAAC;EACzE,CAAC,CAAC;EAEFkB,EAAE,CAAC,kCAAkC,EAAE,MAAK;IAC1CxB,SAAS,CAACgC,UAAU,EAAE;IACtBH,MAAM,CAACtB,SAAS,CAAC0B,QAAQ,CAAC,CAACC,oBAAoB,CAAC,CAAC,OAAO,EAAE/B,cAAc,CAACC,IAAI,CAACC,EAAE,CAAC,CAAC;EACpF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}