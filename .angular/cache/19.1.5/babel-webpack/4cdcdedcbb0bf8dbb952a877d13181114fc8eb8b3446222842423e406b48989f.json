{"ast":null,"code":"\"use strict\";\n\ndescribe('LevelUpComponent', () => {\n  let player;\n  beforeEach(() => {\n    player = {\n      experience: 0,\n      level: 0\n    };\n  });\n  it('should gain 10 experience point each day', () => {\n    player.experience = 0;\n    player.newDay();\n    afterEach(() => {\n      expect(player.experience).toBe(10);\n    });\n    it('should start with 0 in experience and level', () => {});\n    it('should win a level when experience equal 100', () => {});\n    it('should keep the same level', () => {});\n    it('max level should be 10', () => {});\n    it('should have a level strictly inferior to 11', () => {});\n    it('should never have initial experience very high', () => {});\n    it('should never have negative experience', () => {});\n    it('should never have negative level', () => {});\n    it('experience and level should be a valid number', () => {});\n    describe('experience excess', () => {\n      it('should keep the experience excess after level up', () => {});\n    });\n  });\n});","map":{"version":3,"names":["describe","player","beforeEach","experience","level","it","newDay","afterEach","expect","toBe"],"sources":["/Users/mariadelmarsevillaescobar/Downloads/spectacular/src/app/level-up/player.spec.ts"],"sourcesContent":["\ndescribe('LevelUpComponent', () => {\n    let player: any;\n\n    beforeEach(() => {\n        player = { experience: 0, level: 0 };\n    });\n\n    it('should gain 10 experience point each day', () =>{\n        player.experience = 0;\n        player.newDay();\n        afterEach(() => {\n        expect(player.experience).toBe(10);\n    });\n\n    it('should start with 0 in experience and level', () => {\n    })\n\n    it('should win a level when experience equal 100', () => {\n    });\n\n    it('should keep the same level', () => {\n    });\n\n    it('max level should be 10', () => {\n    });\n\n    it('should have a level strictly inferior to 11', () => {});\n\n    it('should never have initial experience very high', () => {});\n\n    it('should never have negative experience', () =>{});\n\n    it('should never have negative level', () =>{});\n\n    it('experience and level should be a valid number', () => {});\n\n    describe('experience excess', () => {\n        it('should keep the experience excess after level up', () => {});\n    });\n})\n"],"mappings":";;AACAA,QAAQ,CAAC,kBAAkB,EAAE,MAAK;EAC9B,IAAIC,MAAW;EAEfC,UAAU,CAAC,MAAK;IACZD,MAAM,GAAG;MAAEE,UAAU,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAC,CAAE;EACxC,CAAC,CAAC;EAEFC,EAAE,CAAC,0CAA0C,EAAE,MAAK;IAChDJ,MAAM,CAACE,UAAU,GAAG,CAAC;IACrBF,MAAM,CAACK,MAAM,EAAE;IACfC,SAAS,CAAC,MAAK;MACfC,MAAM,CAACP,MAAM,CAACE,UAAU,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC;IACtC,CAAC,CAAC;IAEFJ,EAAE,CAAC,6CAA6C,EAAE,MAAK,CACvD,CAAC,CAAC;IAEFA,EAAE,CAAC,8CAA8C,EAAE,MAAK,CACxD,CAAC,CAAC;IAEFA,EAAE,CAAC,4BAA4B,EAAE,MAAK,CACtC,CAAC,CAAC;IAEFA,EAAE,CAAC,wBAAwB,EAAE,MAAK,CAClC,CAAC,CAAC;IAEFA,EAAE,CAAC,6CAA6C,EAAE,MAAK,CAAE,CAAC,CAAC;IAE3DA,EAAE,CAAC,gDAAgD,EAAE,MAAK,CAAE,CAAC,CAAC;IAE9DA,EAAE,CAAC,uCAAuC,EAAE,MAAK,CAAC,CAAC,CAAC;IAEpDA,EAAE,CAAC,kCAAkC,EAAE,MAAK,CAAC,CAAC,CAAC;IAE/CA,EAAE,CAAC,+CAA+C,EAAE,MAAK,CAAE,CAAC,CAAC;IAE7DL,QAAQ,CAAC,mBAAmB,EAAE,MAAK;MAC/BK,EAAE,CAAC,kDAAkD,EAAE,MAAK,CAAE,CAAC,CAAC;IACpE,CAAC,CAAC;EACN,CAAC,CAAC;AACF,CAAC,CADC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}