{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { AdvicesService } from './core/services/advices/advices.service';\nimport { provideHttpClient } from '@angular/common/http';\nimport { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\ndescribe('SpyExpertComponent', () => {\n  let adviceService;\n  let httpTesting;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideHttpClient(), provideHttpClientTesting()]\n    });\n    httpTesting = TestBed.inject(HttpTestingController);\n    adviceService = TestBed.inject(AdvicesService);\n  });\n  afterEach(() => {\n    httpTesting.verify();\n  });\n  it('should return expected advice (httpclient called once)', () => {\n    const expectedAdvice = {\n      id: 1,\n      advice: 'Always test your code.'\n    };\n    adviceService.getAdvice(1).subscribe(advice => expect(advice).toEqual(expectedAdvice));\n    const req = httpTesting.expectOne('/api/advice/1');\n    expect(req.request.method).toBe('GET');\n    req.flush(expectedAdvice);\n  });\n  it('should properly handle request error', () => {});\n});","map":{"version":3,"names":["TestBed","AdvicesService","provideHttpClient","HttpTestingController","provideHttpClientTesting","describe","adviceService","httpTesting","beforeEach","configureTestingModule","providers","inject","afterEach","verify","it","expectedAdvice","id","advice","getAdvice","subscribe","expect","toEqual","req","expectOne","request","method","toBe","flush"],"sources":["/Users/mariadelmarsevillaescobar/Downloads/spectacular/src/app/spy-expert/spy-expert.component.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { AdvicesService } from './core/services/advices/advices.service';\nimport { provideHttpClient } from '@angular/common/http';\nimport {\n  HttpTestingController,\n  provideHttpClientTesting,\n} from '@angular/common/http/testing';\n\ninterface Advice {\n  id: number;\n  advice: string;\n}\n\ndescribe('SpyExpertComponent', () => {\n  let adviceService: AdvicesService;\n  let httpTesting: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideHttpClient(), provideHttpClientTesting()],\n    });\n\n    httpTesting = TestBed.inject(HttpTestingController);\n    adviceService = TestBed.inject(AdvicesService);\n  });\n\n  afterEach(() => {\n    httpTesting.verify();\n  });\n\n  it('should return expected advice (httpclient called once)', () => {\n    const expectedAdvice: Advice = { id: 1, advice: 'Always test your code.' };\n\n    adviceService.getAdvice(1).subscribe((advice) => expect(advice).toEqual(expectedAdvice as any));\n\n    const req = httpTesting.expectOne('/api/advice/1');\n    expect(req.request.method).toBe('GET');\n    req.flush(expectedAdvice);\n  });\n\n  it('should properly handle request error', () => {\n  });\n});\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SACEC,qBAAqB,EACrBC,wBAAwB,QACnB,8BAA8B;AAOrCC,QAAQ,CAAC,oBAAoB,EAAE,MAAK;EAClC,IAAIC,aAA6B;EACjC,IAAIC,WAAkC;EAEtCC,UAAU,CAAC,MAAK;IACdR,OAAO,CAACS,sBAAsB,CAAC;MAC7BC,SAAS,EAAE,CAACR,iBAAiB,EAAE,EAAEE,wBAAwB,EAAE;KAC5D,CAAC;IAEFG,WAAW,GAAGP,OAAO,CAACW,MAAM,CAACR,qBAAqB,CAAC;IACnDG,aAAa,GAAGN,OAAO,CAACW,MAAM,CAACV,cAAc,CAAC;EAChD,CAAC,CAAC;EAEFW,SAAS,CAAC,MAAK;IACbL,WAAW,CAACM,MAAM,EAAE;EACtB,CAAC,CAAC;EAEFC,EAAE,CAAC,wDAAwD,EAAE,MAAK;IAChE,MAAMC,cAAc,GAAW;MAAEC,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAwB,CAAE;IAE1EX,aAAa,CAACY,SAAS,CAAC,CAAC,CAAC,CAACC,SAAS,CAAEF,MAAM,IAAKG,MAAM,CAACH,MAAM,CAAC,CAACI,OAAO,CAACN,cAAqB,CAAC,CAAC;IAE/F,MAAMO,GAAG,GAAGf,WAAW,CAACgB,SAAS,CAAC,eAAe,CAAC;IAClDH,MAAM,CAACE,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACtCJ,GAAG,CAACK,KAAK,CAACZ,cAAc,CAAC;EAC3B,CAAC,CAAC;EAEFD,EAAE,CAAC,sCAAsC,EAAE,MAAK,CAChD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}