{"ast":null,"code":"import _asyncToGenerator from \"/Users/mariadelmarsevillaescobar/Downloads/spectacular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { AdviceComponent } from './advice.component';\nimport { provideRouter, Router } from '@angular/router';\nimport { By } from '@angular/platform-browser';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\ndescribe('AdviceComponent', () => {\n  let component;\n  let fixture;\n  let debugEl;\n  let expectedAdvice = {\n    slip: {\n      id: 2,\n      advice: 'fake advice'\n    }\n  };\n  let router;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [AdviceComponent],\n      providers: [provideRouter([{\n        path: 'hate',\n        component: AdviceComponent\n      }]), {\n        provide: ActivatedRoute,\n        useValue: {\n          paramMap: of(new Map([['id', '2']])) // Mock route param\n        }\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(AdviceComponent);\n    component = fixture.componentInstance;\n    debugEl = fixture.debugElement;\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n    component.advice = expectedAdvice; // Set input manually\n    fixture.detectChanges(); // Re-render component\n  }));\n  it('should display the advice', () => {\n    fixture.detectChanges();\n    const adviceElement = debugEl.query(By.css('p')).nativeElement;\n    expect(adviceElement.textContent).toContain(expectedAdvice.slip.advice);\n  });\n  it('should redirect to the hate page', () => {\n    spyOn(router, 'navigate');\n    component.goToHatePage(); // Assuming this method exists in your component\n    expect(router.navigate).toHaveBeenCalledWith(['/hate']);\n  });\n});","map":{"version":3,"names":["TestBed","AdviceComponent","provideRouter","Router","By","ActivatedRoute","of","describe","component","fixture","debugEl","expectedAdvice","slip","id","advice","router","beforeEach","_asyncToGenerator","configureTestingModule","declarations","providers","path","provide","useValue","paramMap","Map","compileComponents","createComponent","componentInstance","debugElement","inject","detectChanges","it","adviceElement","query","css","nativeElement","expect","textContent","toContain","spyOn","goToHatePage","navigate","toHaveBeenCalledWith"],"sources":["/Users/mariadelmarsevillaescobar/Downloads/spectacular/src/app/spy-expert/advice/advice.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { AdviceComponent } from './advice.component';\nimport { DebugElement } from '@angular/core';\nimport { provideRouter, Router } from '@angular/router';\nimport { By } from '@angular/platform-browser';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\ninterface Advice {\n  slip: { id: number; advice: string };\n}\n\ndescribe('AdviceComponent', () => {\n  let component: AdviceComponent;\n  let fixture: ComponentFixture<AdviceComponent>;\n  let debugEl: DebugElement;\n  let expectedAdvice: Advice = { slip: { id: 2, advice: 'fake advice' } };\n  let router: Router;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [AdviceComponent],\n      providers: [\n        provideRouter([{ path: 'hate', component: AdviceComponent }]),\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            paramMap: of(new Map([['id', '2']])), // Mock route param\n          },\n        },\n      ],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(AdviceComponent);\n    component = fixture.componentInstance;\n    debugEl = fixture.debugElement;\n    router = TestBed.inject(Router);\n\n    fixture.detectChanges();\n\n    component.advice = expectedAdvice; // Set input manually\n    fixture.detectChanges(); // Re-render component\n  });\n\n  it('should display the advice', () => {\n    fixture.detectChanges();\n    const adviceElement = debugEl.query(By.css('p')).nativeElement;\n    expect(adviceElement.textContent).toContain(expectedAdvice.slip.advice);\n  });\n\n  it('should redirect to the hate page', () => {\n    spyOn(router, 'navigate');\n\n    component.goToHatePage(); // Assuming this method exists in your component\n\n    expect(router.navigate).toHaveBeenCalledWith(['/hate']);\n  });\n});\n"],"mappings":";AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,eAAe,QAAQ,oBAAoB;AAEpD,SAASC,aAAa,EAAEC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,EAAE,QAAQ,2BAA2B;AAC9C,SAASC,cAAc,QAAQ,iBAAiB;AAChD,SAASC,EAAE,QAAQ,MAAM;AAMzBC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,SAA0B;EAC9B,IAAIC,OAA0C;EAC9C,IAAIC,OAAqB;EACzB,IAAIC,cAAc,GAAW;IAAEC,IAAI,EAAE;MAAEC,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAa;EAAE,CAAE;EACvE,IAAIC,MAAc;EAElBC,UAAU,cAAAC,iBAAA,CAAC,aAAW;IACpB,MAAMjB,OAAO,CAACkB,sBAAsB,CAAC;MACnCC,YAAY,EAAE,CAAClB,eAAe,CAAC;MAC/BmB,SAAS,EAAE,CACTlB,aAAa,CAAC,CAAC;QAAEmB,IAAI,EAAE,MAAM;QAAEb,SAAS,EAAEP;MAAe,CAAE,CAAC,CAAC,EAC7D;QACEqB,OAAO,EAAEjB,cAAc;QACvBkB,QAAQ,EAAE;UACRC,QAAQ,EAAElB,EAAE,CAAC,IAAImB,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE;;OAEzC;KAEJ,CAAC,CAACC,iBAAiB,EAAE;IAEtBjB,OAAO,GAAGT,OAAO,CAAC2B,eAAe,CAAC1B,eAAe,CAAC;IAClDO,SAAS,GAAGC,OAAO,CAACmB,iBAAiB;IACrClB,OAAO,GAAGD,OAAO,CAACoB,YAAY;IAC9Bd,MAAM,GAAGf,OAAO,CAAC8B,MAAM,CAAC3B,MAAM,CAAC;IAE/BM,OAAO,CAACsB,aAAa,EAAE;IAEvBvB,SAAS,CAACM,MAAM,GAAGH,cAAc,CAAC,CAAC;IACnCF,OAAO,CAACsB,aAAa,EAAE,CAAC,CAAC;EAC3B,CAAC,EAAC;EAEFC,EAAE,CAAC,2BAA2B,EAAE,MAAK;IACnCvB,OAAO,CAACsB,aAAa,EAAE;IACvB,MAAME,aAAa,GAAGvB,OAAO,CAACwB,KAAK,CAAC9B,EAAE,CAAC+B,GAAG,CAAC,GAAG,CAAC,CAAC,CAACC,aAAa;IAC9DC,MAAM,CAACJ,aAAa,CAACK,WAAW,CAAC,CAACC,SAAS,CAAC5B,cAAc,CAACC,IAAI,CAACE,MAAM,CAAC;EACzE,CAAC,CAAC;EAEFkB,EAAE,CAAC,kCAAkC,EAAE,MAAK;IAC1CQ,KAAK,CAACzB,MAAM,EAAE,UAAU,CAAC;IAEzBP,SAAS,CAACiC,YAAY,EAAE,CAAC,CAAC;IAE1BJ,MAAM,CAACtB,MAAM,CAAC2B,QAAQ,CAAC,CAACC,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC;EACzD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}