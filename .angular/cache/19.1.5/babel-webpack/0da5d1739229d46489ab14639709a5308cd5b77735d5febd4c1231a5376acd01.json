{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { AdvicesService } from './core/services/advices/advices.service';\nimport { provideHttpClient } from '@angular/common/http';\nimport { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\ndescribe('SpyExpertComponent', () => {\n  let adviceService;\n  let httpTesting;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideHttpClient(), provideHttpClientTesting()]\n    });\n    httpTesting = TestBed.inject(HttpTestingController);\n    adviceService = TestBed.inject(AdvicesService);\n  });\n  afterEach(() => {\n    httpTesting.verify();\n  });\n  it('should return expected advice (httpclient called once)', () => {});\n  it('should properly handle request error', () => {\n    const errorMessage = '404 Not Found';\n    adviceService.getAdvice(1).subscribe(() => fail('expected an error, not advice'), error => expect(error.message).toContain(errorMessage));\n    const req = httpTesting.expectOne('/api/advice/1');\n    expect(req.request.method).toBe('GET');\n    req.flush(errorMessage, {\n      status: 404,\n      statusText: 'Not Found'\n    });\n  });\n});","map":{"version":3,"names":["TestBed","AdvicesService","provideHttpClient","HttpTestingController","provideHttpClientTesting","describe","adviceService","httpTesting","beforeEach","configureTestingModule","providers","inject","afterEach","verify","it","errorMessage","getAdvice","subscribe","fail","error","expect","message","toContain","req","expectOne","request","method","toBe","flush","status","statusText"],"sources":["/Users/mariadelmarsevillaescobar/Downloads/spectacular/src/app/spy-expert/spy-expert.component.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { AdvicesService } from './core/services/advices/advices.service';\nimport { provideHttpClient } from '@angular/common/http';\nimport {\n  HttpTestingController,\n  provideHttpClientTesting,\n} from '@angular/common/http/testing';\n\ninterface Advice {\n  id: number;\n  advice: string;\n}\n\ndescribe('SpyExpertComponent', () => {\n  let adviceService: AdvicesService;\n  let httpTesting: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideHttpClient(), provideHttpClientTesting()],\n    });\n\n    httpTesting = TestBed.inject(HttpTestingController);\n    adviceService = TestBed.inject(AdvicesService);\n  });\n\n  afterEach(() => {\n    httpTesting.verify();\n  });\n\n  it('should return expected advice (httpclient called once)', () => {\n  });\n\n  it('should properly handle request error', () => {\n    const errorMessage = '404 Not Found';\n\n    adviceService.getAdvice(1).subscribe(\n      () => fail('expected an error, not advice'),\n      (error) => expect(error.message).toContain(errorMessage)\n    );\n\n    const req = httpTesting.expectOne('/api/advice/1');\n    expect(req.request.method).toBe('GET');\n\n    req.flush(errorMessage, { status: 404, statusText: 'Not Found' });\n  });\n});\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SACEC,qBAAqB,EACrBC,wBAAwB,QACnB,8BAA8B;AAOrCC,QAAQ,CAAC,oBAAoB,EAAE,MAAK;EAClC,IAAIC,aAA6B;EACjC,IAAIC,WAAkC;EAEtCC,UAAU,CAAC,MAAK;IACdR,OAAO,CAACS,sBAAsB,CAAC;MAC7BC,SAAS,EAAE,CAACR,iBAAiB,EAAE,EAAEE,wBAAwB,EAAE;KAC5D,CAAC;IAEFG,WAAW,GAAGP,OAAO,CAACW,MAAM,CAACR,qBAAqB,CAAC;IACnDG,aAAa,GAAGN,OAAO,CAACW,MAAM,CAACV,cAAc,CAAC;EAChD,CAAC,CAAC;EAEFW,SAAS,CAAC,MAAK;IACbL,WAAW,CAACM,MAAM,EAAE;EACtB,CAAC,CAAC;EAEFC,EAAE,CAAC,wDAAwD,EAAE,MAAK,CAClE,CAAC,CAAC;EAEFA,EAAE,CAAC,sCAAsC,EAAE,MAAK;IAC9C,MAAMC,YAAY,GAAG,eAAe;IAEpCT,aAAa,CAACU,SAAS,CAAC,CAAC,CAAC,CAACC,SAAS,CAClC,MAAMC,IAAI,CAAC,+BAA+B,CAAC,EAC1CC,KAAK,IAAKC,MAAM,CAACD,KAAK,CAACE,OAAO,CAAC,CAACC,SAAS,CAACP,YAAY,CAAC,CACzD;IAED,MAAMQ,GAAG,GAAGhB,WAAW,CAACiB,SAAS,CAAC,eAAe,CAAC;IAClDJ,MAAM,CAACG,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAEtCJ,GAAG,CAACK,KAAK,CAACb,YAAY,EAAE;MAAEc,MAAM,EAAE,GAAG;MAAEC,UAAU,EAAE;IAAW,CAAE,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}