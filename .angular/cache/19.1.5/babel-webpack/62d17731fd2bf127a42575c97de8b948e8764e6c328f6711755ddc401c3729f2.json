{"ast":null,"code":"import { Player } from \"./player\";\ndescribe('LevelUpComponent', () => {\n  let player;\n  beforeEach(() => {\n    player = new Player(0, 0);\n  });\n  it('should gain 10 experience point each day', () => {\n    player.newDay();\n    expect(player.experience).toBe(10);\n  });\n  it('should start with 0 in experience and level', () => {\n    expect(player.experience).toBe(0);\n    expect(player.level).toBe(0);\n  });\n  it('should win a level when experience equal 100', () => {\n    for (let i = 0; i < 10; i++) {\n      player.newDay();\n    }\n    expect(player.level).toBe(1);\n    expect(player.experience).toBe(0);\n  });\n  it('should keep the same level', () => {\n    player.newDay();\n    expect(player.level).toBe(0);\n  });\n  it('max level should be 10', () => {\n    player.level = 10;\n    player.experience = 100;\n    player.newDay();\n    expect(player.level).toBe(10);\n  });\n  it('should have a level strictly inferior to 11', () => {\n    for (let i = 0; i < 200; i++) {\n      player.newDay();\n    }\n    expect(player.level).toBeLessThan(11);\n  });\n  it('should never have initial experience very high', () => {});\n  it('should never have negative experience', () => {});\n  it('should never have negative level', () => {});\n  it('experience and level should be a valid number', () => {});\n  describe('experience excess', () => {\n    it('should keep the experience excess after level up', () => {});\n  });\n});","map":{"version":3,"names":["Player","describe","player","beforeEach","it","newDay","expect","experience","toBe","level","i","toBeLessThan"],"sources":["/Users/mariadelmarsevillaescobar/Downloads/spectacular/src/app/level-up/player.spec.ts"],"sourcesContent":["import { Player } from \"./player\";\n\ndescribe('LevelUpComponent', () => {\n    let player: Player;\n\n    beforeEach(() => {\n      player = new Player(0, 0);\n    });\n\n    it('should gain 10 experience point each day', () =>{\n      player.newDay();\n      expect(player.experience).toBe(10);\n    });\n\n    it('should start with 0 in experience and level', () => {\n      expect(player.experience).toBe(0);\n      expect(player.level).toBe(0);\n    })\n\n    it('should win a level when experience equal 100', () => {\n      for (let i = 0; i < 10; i++) {\n        player.newDay();\n      }\n      expect(player.level).toBe(1);\n      expect(player.experience).toBe(0);\n    });\n\n    it('should keep the same level', () => {\n      player.newDay();\n      expect(player.level).toBe(0);\n    });\n\n    it('max level should be 10', () => {\n      player.level = 10;\n      player.experience = 100;\n      player.newDay();\n      expect(player.level).toBe(10);\n    });\n\n    it('should have a level strictly inferior to 11', () => {\n      for (let i = 0; i < 200; i++) {\n        player.newDay();\n    }\n    expect(player.level).toBeLessThan(11);\n    });\n\n    it('should never have initial experience very high', () => {});\n\n    it('should never have negative experience', () =>{});\n\n    it('should never have negative level', () =>{});\n\n    it('experience and level should be a valid number', () => {});\n\n    describe('experience excess', () => {\n        it('should keep the experience excess after level up', () => {});\n    });\n});\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AAEjCC,QAAQ,CAAC,kBAAkB,EAAE,MAAK;EAC9B,IAAIC,MAAc;EAElBC,UAAU,CAAC,MAAK;IACdD,MAAM,GAAG,IAAIF,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3B,CAAC,CAAC;EAEFI,EAAE,CAAC,0CAA0C,EAAE,MAAK;IAClDF,MAAM,CAACG,MAAM,EAAE;IACfC,MAAM,CAACJ,MAAM,CAACK,UAAU,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACpC,CAAC,CAAC;EAEFJ,EAAE,CAAC,6CAA6C,EAAE,MAAK;IACrDE,MAAM,CAACJ,MAAM,CAACK,UAAU,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IACjCF,MAAM,CAACJ,MAAM,CAACO,KAAK,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;EAEFJ,EAAE,CAAC,8CAA8C,EAAE,MAAK;IACtD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BR,MAAM,CAACG,MAAM,EAAE;IACjB;IACAC,MAAM,CAACJ,MAAM,CAACO,KAAK,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;IAC5BF,MAAM,CAACJ,MAAM,CAACK,UAAU,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACnC,CAAC,CAAC;EAEFJ,EAAE,CAAC,4BAA4B,EAAE,MAAK;IACpCF,MAAM,CAACG,MAAM,EAAE;IACfC,MAAM,CAACJ,MAAM,CAACO,KAAK,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;EAEFJ,EAAE,CAAC,wBAAwB,EAAE,MAAK;IAChCF,MAAM,CAACO,KAAK,GAAG,EAAE;IACjBP,MAAM,CAACK,UAAU,GAAG,GAAG;IACvBL,MAAM,CAACG,MAAM,EAAE;IACfC,MAAM,CAACJ,MAAM,CAACO,KAAK,CAAC,CAACD,IAAI,CAAC,EAAE,CAAC;EAC/B,CAAC,CAAC;EAEFJ,EAAE,CAAC,6CAA6C,EAAE,MAAK;IACrD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;MAC5BR,MAAM,CAACG,MAAM,EAAE;IACnB;IACAC,MAAM,CAACJ,MAAM,CAACO,KAAK,CAAC,CAACE,YAAY,CAAC,EAAE,CAAC;EACrC,CAAC,CAAC;EAEFP,EAAE,CAAC,gDAAgD,EAAE,MAAK,CAAE,CAAC,CAAC;EAE9DA,EAAE,CAAC,uCAAuC,EAAE,MAAK,CAAC,CAAC,CAAC;EAEpDA,EAAE,CAAC,kCAAkC,EAAE,MAAK,CAAC,CAAC,CAAC;EAE/CA,EAAE,CAAC,+CAA+C,EAAE,MAAK,CAAE,CAAC,CAAC;EAE7DH,QAAQ,CAAC,mBAAmB,EAAE,MAAK;IAC/BG,EAAE,CAAC,kDAAkD,EAAE,MAAK,CAAE,CAAC,CAAC;EACpE,CAAC,CAAC;AACN,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}