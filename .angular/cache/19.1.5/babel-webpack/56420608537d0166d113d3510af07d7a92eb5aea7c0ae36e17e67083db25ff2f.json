{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { AdvicesService } from './core/services/advices/advices.service';\nimport { provideHttpClient } from '@angular/common/http';\nimport { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\ndescribe('SpyExpertComponent', () => {\n  let adviceService;\n  let httpTesting;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideHttpClient(), provideHttpClientTesting()]\n    });\n    httpTesting = TestBed.inject(HttpTestingController);\n    adviceService = TestBed.inject(AdvicesService);\n  });\n  afterEach(() => {\n    httpTesting.verify();\n  });\n  it('should return expected advice (httpclient called once)', () => {\n    const mockAdvice = {\n      id: 1,\n      advice: 'Always test your code'\n    };\n    adviceService.getAdvice().subscribe(advice => {\n      expect(advice).toEqual(mockAdvice);\n    });\n    const req = httpTesting.expectOne('API_ENDPOINT'); // Replace with actual endpoint\n    expect(req.request.method).toBe('GET');\n    req.flush(mockAdvice); // Simulates a successful response\n  });\n  it('should properly handle request error', () => {\n    const errorMessage = 'Failed to load advice';\n    adviceService.getAdvice().subscribe({\n      next: () => fail('Expected an error, but got a success response'),\n      error: error => {\n        expect(error).toBeTruthy();\n        expect(error.status).toBe(500);\n        expect(error.statusText).toBe('Internal Server Error');\n      }\n    });\n    const req = httpTesting.expectOne('API_ENDPOINT'); // Replace with actual endpoint\n    expect(req.request.method).toBe('GET');\n    req.flush({\n      message: errorMessage\n    }, {\n      status: 500,\n      statusText: 'Internal Server Error'\n    });\n  });\n});","map":{"version":3,"names":["TestBed","AdvicesService","provideHttpClient","HttpTestingController","provideHttpClientTesting","describe","adviceService","httpTesting","beforeEach","configureTestingModule","providers","inject","afterEach","verify","it","mockAdvice","id","advice","getAdvice","subscribe","expect","toEqual","req","expectOne","request","method","toBe","flush","errorMessage","next","fail","error","toBeTruthy","status","statusText","message"],"sources":["/Users/mariadelmarsevillaescobar/Downloads/spectacular/src/app/spy-expert/spy-expert.component.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { AdvicesService } from './core/services/advices/advices.service';\nimport { provideHttpClient } from '@angular/common/http';\nimport {\n  HttpTestingController,\n  provideHttpClientTesting,\n} from '@angular/common/http/testing';\n\ninterface Advice {\n  id: number;\n  advice: string;\n}\n\ndescribe('SpyExpertComponent', () => {\n  let adviceService: AdvicesService;\n  let httpTesting: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideHttpClient(), provideHttpClientTesting()],\n    });\n\n    httpTesting = TestBed.inject(HttpTestingController);\n    adviceService = TestBed.inject(AdvicesService);\n  });\n\n  afterEach(() => {\n    httpTesting.verify();\n  });\n\n  it('should return expected advice (httpclient called once)', () => {\n    const mockAdvice: Advice = { id: 1, advice: 'Always test your code' };\n\n    adviceService.getAdvice().subscribe((advice) => {\n      expect(advice).toEqual(mockAdvice);\n    });\n\n    const req = httpTesting.expectOne('API_ENDPOINT'); // Replace with actual endpoint\n    expect(req.request.method).toBe('GET');\n\n    req.flush(mockAdvice); // Simulates a successful response\n  });\n\n  it('should properly handle request error', () => {\n    const errorMessage = 'Failed to load advice';\n\n    adviceService.getAdvice().subscribe({\n      next: () => fail('Expected an error, but got a success response'),\n      error: (error) => {\n        expect(error).toBeTruthy();\n        expect(error.status).toBe(500);\n        expect(error.statusText).toBe('Internal Server Error');\n      },\n    });\n\n    const req = httpTesting.expectOne('API_ENDPOINT'); // Replace with actual endpoint\n    expect(req.request.method).toBe('GET');\n\n    req.flush({ message: errorMessage }, { status: 500, statusText: 'Internal Server Error' });\n  });\n});\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SACEC,qBAAqB,EACrBC,wBAAwB,QACnB,8BAA8B;AAOrCC,QAAQ,CAAC,oBAAoB,EAAE,MAAK;EAClC,IAAIC,aAA6B;EACjC,IAAIC,WAAkC;EAEtCC,UAAU,CAAC,MAAK;IACdR,OAAO,CAACS,sBAAsB,CAAC;MAC7BC,SAAS,EAAE,CAACR,iBAAiB,EAAE,EAAEE,wBAAwB,EAAE;KAC5D,CAAC;IAEFG,WAAW,GAAGP,OAAO,CAACW,MAAM,CAACR,qBAAqB,CAAC;IACnDG,aAAa,GAAGN,OAAO,CAACW,MAAM,CAACV,cAAc,CAAC;EAChD,CAAC,CAAC;EAEFW,SAAS,CAAC,MAAK;IACbL,WAAW,CAACM,MAAM,EAAE;EACtB,CAAC,CAAC;EAEFC,EAAE,CAAC,wDAAwD,EAAE,MAAK;IAChE,MAAMC,UAAU,GAAW;MAAEC,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAuB,CAAE;IAErEX,aAAa,CAACY,SAAS,EAAE,CAACC,SAAS,CAAEF,MAAM,IAAI;MAC7CG,MAAM,CAACH,MAAM,CAAC,CAACI,OAAO,CAACN,UAAU,CAAC;IACpC,CAAC,CAAC;IAEF,MAAMO,GAAG,GAAGf,WAAW,CAACgB,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;IACnDH,MAAM,CAACE,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAEtCJ,GAAG,CAACK,KAAK,CAACZ,UAAU,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC;EAEFD,EAAE,CAAC,sCAAsC,EAAE,MAAK;IAC9C,MAAMc,YAAY,GAAG,uBAAuB;IAE5CtB,aAAa,CAACY,SAAS,EAAE,CAACC,SAAS,CAAC;MAClCU,IAAI,EAAEA,CAAA,KAAMC,IAAI,CAAC,+CAA+C,CAAC;MACjEC,KAAK,EAAGA,KAAK,IAAI;QACfX,MAAM,CAACW,KAAK,CAAC,CAACC,UAAU,EAAE;QAC1BZ,MAAM,CAACW,KAAK,CAACE,MAAM,CAAC,CAACP,IAAI,CAAC,GAAG,CAAC;QAC9BN,MAAM,CAACW,KAAK,CAACG,UAAU,CAAC,CAACR,IAAI,CAAC,uBAAuB,CAAC;MACxD;KACD,CAAC;IAEF,MAAMJ,GAAG,GAAGf,WAAW,CAACgB,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;IACnDH,MAAM,CAACE,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAEtCJ,GAAG,CAACK,KAAK,CAAC;MAAEQ,OAAO,EAAEP;IAAY,CAAE,EAAE;MAAEK,MAAM,EAAE,GAAG;MAAEC,UAAU,EAAE;IAAuB,CAAE,CAAC;EAC5F,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}